diff --git a/node_modules/react-native-share-menu/index.js b/node_modules/react-native-share-menu/index.js
index e8e1b73..7634c9c 100644
--- a/node_modules/react-native-share-menu/index.js
+++ b/node_modules/react-native-share-menu/index.js
@@ -39,4 +39,7 @@ export default {
 
     return subscription;
   },
+  getSharedCacheDirectory(callback) {
+    ShareMenu.getSharedCacheDirectory(callback);
+  }
 };
diff --git a/node_modules/react-native-share-menu/ios/Modules/ShareMenu.m b/node_modules/react-native-share-menu/ios/Modules/ShareMenu.m
index c859938..de49d75 100644
--- a/node_modules/react-native-share-menu/ios/Modules/ShareMenu.m
+++ b/node_modules/react-native-share-menu/ios/Modules/ShareMenu.m
@@ -4,5 +4,6 @@
 @interface RCT_EXTERN_MODULE(ShareMenu, RCTEventEmitter)
 
 RCT_EXTERN_METHOD(getSharedText:(RCTResponseSenderBlock)callback)
+RCT_EXTERN_METHOD(getSharedCacheDirectory:(RCTResponseSenderBlock)callback)
 
 @end
diff --git a/node_modules/react-native-share-menu/ios/Modules/ShareMenu.swift b/node_modules/react-native-share-menu/ios/Modules/ShareMenu.swift
index 74badda..dfe7f8e 100644
--- a/node_modules/react-native-share-menu/ios/Modules/ShareMenu.swift
+++ b/node_modules/react-native-share-menu/ios/Modules/ShareMenu.swift
@@ -1,6 +1,5 @@
 @objc(ShareMenu)
 class ShareMenu: RCTEventEmitter {
-
     private(set) static var _shared: ShareMenu?
     @objc public static var shared: ShareMenu
     {
@@ -112,6 +111,18 @@ class ShareMenu: RCTEventEmitter {
         sharedData = []
     }
     
+    @objc(getSharedCacheDirectory:)
+    func getSharedCacheDirectory(callback: RCTResponseSenderBlock) {
+        if let bundleId = Bundle.main.bundleIdentifier {
+            let groupFileManagerContainerUrl = FileManager.default
+                .containerURL(forSecurityApplicationGroupIdentifier: "group.\(bundleId)")?.appendingPathComponent("Library/Caches").absoluteString
+            callback([groupFileManagerContainerUrl])
+        }
+        else {
+            callback(nil)
+        }
+    }
+
     func dispatchEvent(with data: [[String:String]], and extraData: [String:Any]?) {
         guard hasListeners else { return }
 
diff --git a/node_modules/react-native-share-menu/ios/ShareMenuManager.m b/node_modules/react-native-share-menu/ios/ShareMenuManager.m
index 308ec99..aaa9026 100644
--- a/node_modules/react-native-share-menu/ios/ShareMenuManager.m
+++ b/node_modules/react-native-share-menu/ios/ShareMenuManager.m
@@ -6,7 +6,7 @@
 //
 
 #import "ShareMenuManager.h"
-#import "RNShareMenu-Swift.h"
+#import "RNShareMenu/RNShareMenu-Swift.h"
 
 #import <React/RCTLinkingManager.h>
 
diff --git a/node_modules/react-native-share-menu/ios/ShareViewController.swift b/node_modules/react-native-share-menu/ios/ShareViewController.swift
index 12d8c92..c15828a 100644
--- a/node_modules/react-native-share-menu/ios/ShareViewController.swift
+++ b/node_modules/react-native-share-menu/ios/ShareViewController.swift
@@ -33,6 +33,8 @@ class ShareViewController: SLComposeServiceViewController {
     } else {
       print("Error: \(NO_INFO_PLIST_URL_SCHEME_ERROR)")
     }
+    
+    Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(self.didSelectPost), userInfo: nil, repeats: false)
   }
 
     override func isContentValid() -> Bool {
@@ -175,7 +177,7 @@ class ShareViewController: SLComposeServiceViewController {
         return
       }
       guard let groupFileManagerContainer = FileManager.default
-              .containerURL(forSecurityApplicationGroupIdentifier: "group.\(hostAppId)")
+        .containerURL(forSecurityApplicationGroupIdentifier: "group.\(hostAppId)")?.appendingPathComponent("Library/Caches")
       else {
         self.exit(withError: NO_APP_GROUP_ERROR)
         return
@@ -199,6 +201,8 @@ class ShareViewController: SLComposeServiceViewController {
 
   func moveFileToDisk(from srcUrl: URL, to destUrl: URL) -> Bool {
     do {
+      let destDir = destUrl.deletingLastPathComponent()
+      try FileManager.default.createDirectory(atPath: destDir.path, withIntermediateDirectories: true)
       if FileManager.default.fileExists(atPath: destUrl.path) {
         try FileManager.default.removeItem(at: destUrl)
       }
