diff --git a/node_modules/expo-modules-core/ExpoModulesCore.podspec b/node_modules/expo-modules-core/ExpoModulesCore.podspec
index 246afe0..199e068 100644
--- a/node_modules/expo-modules-core/ExpoModulesCore.podspec
+++ b/node_modules/expo-modules-core/ExpoModulesCore.podspec
@@ -6,6 +6,19 @@ unless defined?(install_modules_dependencies)
   require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
 end
 
+header_search_paths = []
+
+if ENV['USE_FRAMEWORKS']
+  header_search_paths.concat([
+    '"${PODS_CONFIGURATION_BUILD_DIR}/React-RuntimeApple/React_RuntimeApple.framework/Headers"',
+    '"${PODS_CONFIGURATION_BUILD_DIR}/React-RuntimeCore/React_RuntimeCore.framework/Headers"',
+    '"${PODS_CONFIGURATION_BUILD_DIR}/React-performancetimeline/React_performancetimeline.framework/Headers"',
+    '"${PODS_CONFIGURATION_BUILD_DIR}/React-runtimescheduler/React_runtimescheduler.framework/Headers"',
+    '"${PODS_CONFIGURATION_BUILD_DIR}/React-rendererconsistency/React_rendererconsistency.framework/Headers"',
+    '"${PODS_CONFIGURATION_BUILD_DIR}/React-jserrorhandler/React_jserrorhandler.framework/Headers"',
+  ])
+end
+
 package = JSON.parse(File.read(File.join(__dir__, 'package.json')))
 
 reactNativeVersion = '0.0.0'
@@ -53,6 +66,7 @@ Pod::Spec.new do |s|
     'DEFINES_MODULE' => 'YES',
     'CLANG_CXX_LANGUAGE_STANDARD' => 'c++20',
     'SWIFT_COMPILATION_MODE' => 'wholemodule',
+    'HEADER_SEARCH_PATHS' => header_search_paths.join(' '),
     'OTHER_SWIFT_FLAGS' => "$(inherited) #{new_arch_enabled ? new_arch_compiler_flags : ''}"
   }
   s.user_target_xcconfig = {
diff --git a/node_modules/expo-modules-core/android/src/main/java/expo/modules/adapters/react/apploader/RNHeadlessAppLoader.kt b/node_modules/expo-modules-core/android/src/main/java/expo/modules/adapters/react/apploader/RNHeadlessAppLoader.kt
index 14a88fd..54d70f4 100644
--- a/node_modules/expo-modules-core/android/src/main/java/expo/modules/adapters/react/apploader/RNHeadlessAppLoader.kt
+++ b/node_modules/expo-modules-core/android/src/main/java/expo/modules/adapters/react/apploader/RNHeadlessAppLoader.kt
@@ -28,7 +28,7 @@ class RNHeadlessAppLoader @DoNotStrip constructor(private val context: Context)
         // In old arch reactHost will be null
         if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {
           // New architecture
-          val reactHost = (context as ReactApplication).reactHost ?: throw IllegalStateException("Your application does not have a valid reactHost")
+          val reactHost = (context.applicationContext as ReactApplication).reactHost ?: throw IllegalStateException("Your application does not have a valid reactHost")
           reactHost.addReactInstanceEventListener(
             object : ReactInstanceEventListener {
               override fun onReactContextInitialized(context: ReactContext) {
@@ -42,7 +42,7 @@ class RNHeadlessAppLoader @DoNotStrip constructor(private val context: Context)
           reactHost.start()
         } else {
           // Old architecture
-          val reactInstanceManager = (context as ReactApplication).reactNativeHost.reactInstanceManager
+          val reactInstanceManager = (context.applicationContext as ReactApplication).reactNativeHost.reactInstanceManager
           reactInstanceManager.addReactInstanceEventListener(
             object : ReactInstanceEventListener {
               override fun onReactContextInitialized(context: ReactContext) {
@@ -69,7 +69,7 @@ class RNHeadlessAppLoader @DoNotStrip constructor(private val context: Context)
       val reactContext = appRecords[appScopeKey] ?: return false
       if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {
         // New architecture
-        val reactHost = (reactContext.baseContext as ReactApplication).reactHost ?: throw IllegalStateException("Your application does not have a valid reactHost")
+        val reactHost = (reactContext.applicationContext as ReactApplication).reactHost ?: throw IllegalStateException("Your application does not have a valid reactHost")
         android.os.Handler(reactContext.mainLooper).post {
           reactHost.destroy("Closing headless task app", null)
           HeadlessAppLoaderNotifier.notifyAppDestroyed(appScopeKey)
@@ -77,7 +77,7 @@ class RNHeadlessAppLoader @DoNotStrip constructor(private val context: Context)
         }
       } else {
         // Old architecture
-        val reactNativeHost = (reactContext as ReactApplication).reactNativeHost
+        val reactNativeHost = (reactContext.applicationContext as ReactApplication).reactNativeHost
         if (reactNativeHost.hasInstance()) {
           val reactInstanceManager: ReactInstanceManager = reactNativeHost.reactInstanceManager
           android.os.Handler(reactContext.mainLooper).post {
@@ -106,7 +106,7 @@ class RNHeadlessAppLoader @DoNotStrip constructor(private val context: Context)
       return true
     } else {
       // Old architecture
-      val reactNativeHost = (reactContext.baseContext as ReactApplication).reactNativeHost
+      val reactNativeHost = (reactContext.applicationContext as ReactApplication).reactNativeHost
       return reactNativeHost.reactInstanceManager.hasStartedCreatingInitialContext()
     }
   }
